import * as glob from "glob";
import * as yaml from "js-yaml";
import * as fs from "fs/promises";

const DEFAULT_WARNING_TEXT = "// This file was created by converting a YAML file($FILEPATH$) - DO NOT EDIT THIS FILE";
const DEFAULT_JSON_SPACES = 4;

export const findAllYaml = (globPath: string): Promise<string[]> => {
    return new Promise((resolve, reject) => {
        glob(globPath, {nodir: true}, (err, files) => {
            if (err) return reject(err);
            resolve(files);
        });
    });
};

export interface Options {
    type: string
    warning?: string | boolean
    templateStart?: string
    templateClose?: string
    spaces?: number
}

export const convertFile = (filePath: string, content: string, opts: Options): {outPath: string, outContent: string} => {
    const doc = yaml.load(content);
    const outPath = filePath.replace(/yaml$/, opts.type);

    if (opts.type === "ts") {
        opts.warning = opts.warning ?? true;
        opts.templateStart = opts.templateStart || "\nexport default ";
        opts.templateClose = opts.templateClose || ";\n";
    } else if (opts.type === "js") {
        opts.warning = opts.warning ?? true;
        opts.templateStart = opts.templateStart || "\nmodule.exports = ";
        opts.templateClose = opts.templateClose || ";\n";
    } else {
        opts.warning = ""; // Not possible to add a comment to JSON
        opts.templateStart = opts.templateStart || "";
        opts.templateClose = opts.templateClose || "";
    }

    if (opts.warning !== "") {
        if (opts.warning === true) {
            opts.warning = DEFAULT_WARNING_TEXT.replace(/\$FILEPATH\$/g, filePath);
        }
        // Else, it's a custom string the user has added on their own
    }

    opts.spaces = opts.spaces ?? DEFAULT_JSON_SPACES;

    const outContent = `${opts.warning}${opts.templateStart}${JSON.stringify(doc, null, opts.spaces)}${opts.templateClose}`;
    return {
        outPath,
        outContent,
    };
};

export const convertYaml = async (globPath: string, opts: Options): Promise<string[][]> => {
    const files = await findAllYaml(globPath);
    const outs = [];
    for (const file of files) {
        const fileContent = await fs.readFile(file, "utf-8");
        const {outPath, outContent} = await convertFile(file, fileContent, opts);
        await fs.writeFile(outPath, outContent, "utf-8");
        outs.push([file, outPath]);
    }
    return outs;
};
